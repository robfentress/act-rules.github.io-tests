{"version":3,"sources":["webpack:///./src/templates/default.js"],"names":["data","markdownRemark","site","html","frontmatter","updatedTitle","title","siteMetadata","glossaryPaths","Object","keys","glossaryUsages","reduce","out","key","keywords","className","dangerouslySetInnerHTML","__html","content","baseUrl","baseHref","length","window","location","origin","replace","match","glossaryKey","toLowerCase","includes","value","linkUpGlossaryTerms","query"],"mappings":"iOAMe,sBAAe,IAAZA,EAAW,EAAXA,KACTC,EAAyBD,EAAzBC,eAAgBC,EAASF,EAATE,KAChBC,EAAsBF,EAAtBE,KAAMC,EAAgBH,EAAhBG,YACRC,EAAkBD,EAAYE,MAAlB,MAA6BJ,EAAKK,aAAaD,MAsB3DE,EAAgBC,OAAOC,KAAKC,GAAgBC,QAAO,SAACC,EAAKC,GAE9D,OADAD,EAAIC,GAAJ,YAAuBA,EAChBD,IACL,IAEH,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAKP,MAAOD,EAAcU,SAAUb,EAAKK,aAAaQ,WACtD,6BAASC,UAAU,kBAClB,4BAAKZ,EAAYE,OACjB,yBACCW,wBAAyB,CACxBC,OAhCuB,SAACC,EAASnB,GACrC,IAAKA,EACJ,OAAOmB,EAER,IAAMC,EAAUlB,EAAKK,aAAac,SAASC,QAAU,EAAIC,OAAOC,SAASC,OAASvB,EAAKK,aAAac,SACpG,OAAOF,EAAQO,QAAQ,kBAAkB,SAACC,EAAOb,GAChD,IAAMc,EAAW,IAAOd,EAAIe,cAC5B,IAAKpB,OAAOC,KAAKV,GAAM8B,SAASF,GAC/B,OAAOD,EAGR,IAAMI,EAAQ/B,EAAK4B,GACnB,YAAqB,IAAVG,EACHJ,EAGF,UAAWP,EAAjB,IAA4BW,EAA5B,OAgBWC,CAAoB7B,EAAMK,SAQjC,IAAMyB,EAAK","file":"component---src-templates-default-js-e314c1508fb2d32c50d4.js","sourcesContent":["import React from 'react'\nimport Layout from '../components/layout/'\nimport { graphql } from 'gatsby'\nimport SEO from '../components/seo'\nimport glossaryUsages from './../../_data/glossary-usages.json'\n\nexport default ({ data }) => {\n\tconst { markdownRemark, site } = data\n\tconst { html, frontmatter } = markdownRemark\n\tconst updatedTitle = `${frontmatter.title} | ${site.siteMetadata.title}`\n\n\tconst linkUpGlossaryTerms = (content, data) => {\n\t\tif (!data) {\n\t\t\treturn content\n\t\t}\n\t\tconst baseUrl = site.siteMetadata.baseHref.length <= 0 ? window.location.origin : site.siteMetadata.baseHref\n\t\treturn content.replace(/href=\"#(.*?)\"/g, (match, key) => {\n\t\t\tconst glossaryKey = `#${key.toLowerCase()}`\n\t\t\tif (!Object.keys(data).includes(glossaryKey)) {\n\t\t\t\treturn match\n\t\t\t}\n\n\t\t\tconst value = data[glossaryKey]\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\treturn match\n\t\t\t}\n\n\t\t\treturn `href=\" ${baseUrl}/${value}\"`\n\t\t})\n\t}\n\n\tconst glossaryPaths = Object.keys(glossaryUsages).reduce((out, key) => {\n\t\tout[key] = `glossary/${key}`\n\t\treturn out\n\t}, {})\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SEO title={updatedTitle} keywords={site.siteMetadata.keywords} />\n\t\t\t<section className=\"page-container\">\n\t\t\t\t<h1>{frontmatter.title}</h1>\n\t\t\t\t<div\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html: linkUpGlossaryTerms(html, glossaryPaths),\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</section>\n\t\t</Layout>\n\t)\n}\n\nexport const query = graphql`\n\tquery($slug: String!) {\n\t\tmarkdownRemark(fields: { slug: { eq: $slug } }) {\n\t\t\thtml\n\t\t\tfrontmatter {\n\t\t\t\ttitle\n\t\t\t}\n\t\t}\n\t\tsite {\n\t\t\tsiteMetadata {\n\t\t\t\ttitle\n\t\t\t\tkeywords\n\t\t\t\tbaseHref\n\t\t\t}\n\t\t}\n\t}\n`\n"],"sourceRoot":""}